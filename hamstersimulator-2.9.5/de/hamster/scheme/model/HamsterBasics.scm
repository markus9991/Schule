(define (getTerritorium)
(de.hamster.scheme.model.SchemeHamster.getTerritorium)
)

(define (setTerritorium T)
(de.hamster.scheme.model.SchemeHamster.setTerritorium T)
)

(define (vor l)
(de.hamster.scheme.model.SchemeHamster.checkBefehl "v")
(de.hamster.scheme.model.SchemeHamster.setTerritorium (_$vor$ l))
)

(define (linksUm l)
(de.hamster.scheme.model.SchemeHamster.checkBefehl "l")
(de.hamster.scheme.model.SchemeHamster.setTerritorium (_$linksUm$ l))
)

(define (gib l)
(de.hamster.scheme.model.SchemeHamster.checkBefehl "g")
(de.hamster.scheme.model.SchemeHamster.setTerritorium (_$gib$ l))
)

(define (nimm l)
(de.hamster.scheme.model.SchemeHamster.checkBefehl "n")
(de.hamster.scheme.model.SchemeHamster.setTerritorium (_$nimm$ l))
)

(define (maulLeer? l)
(de.hamster.scheme.model.SchemeHamster.checkBefehl "m")
(_$maulLeer$? l)
)

(define (kornDa? l)
(de.hamster.scheme.model.SchemeHamster.checkBefehl "k")
(_$kornDa$? l)
)

(define (vornFrei? l)
(de.hamster.scheme.model.SchemeHamster.checkBefehl "f")
(_$vornFrei$? l)
)

(define (_$vor$ l) 
(cond ( (not (_$vornFrei$? l)) l )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Nord") 
				(list (_$getFeld$ l) (list "Hamster" (- (_$getY$ (_$getHamster$ l)) 1) (_$getX$ (_$getHamster$ l)) (_$getHamsterKoerner$ (_$getHamster$ l))  "Nord")) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Ost") 
				(list (_$getFeld$ l) (list "Hamster" (_$getY$ (_$getHamster$ l)) (+ (_$getX$ (_$getHamster$ l)) 1) (_$getHamsterKoerner$ (_$getHamster$ l))  "Ost")) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Sued") 
				(list (_$getFeld$ l) (list "Hamster" (+ (_$getY$ (_$getHamster$ l)) 1) (_$getX$ (_$getHamster$ l)) (_$getHamsterKoerner$ (_$getHamster$ l))  "Sued")) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "West") 
				(list (_$getFeld$ l) (list "Hamster" (_$getY$ (_$getHamster$ l))  (- (_$getX$ (_$getHamster$ l)) 1) (_$getHamsterKoerner$ (_$getHamster$ l)) "West")) ))
)

(define (_$linksUm$ l) 
(cond ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Nord") 
				(list (_$getFeld$ l) (list "Hamster" (_$getY$ (_$getHamster$ l)) (_$getX$ (_$getHamster$ l)) (_$getHamsterKoerner$ (_$getHamster$ l))  "West")) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Ost") 
				(list (_$getFeld$ l) (list "Hamster" (_$getY$ (_$getHamster$ l)) (_$getX$ (_$getHamster$ l)) (_$getHamsterKoerner$ (_$getHamster$ l))  "Nord")) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Sued") 
				(list (_$getFeld$ l) (list "Hamster" (_$getY$ (_$getHamster$ l)) (_$getX$ (_$getHamster$ l)) (_$getHamsterKoerner$ (_$getHamster$ l))  "Ost")) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "West") 
				(list (_$getFeld$ l) (list "Hamster" (_$getY$ (_$getHamster$ l)) (_$getX$ (_$getHamster$ l)) (_$getHamsterKoerner$ (_$getHamster$ l))  "Sued")) ))
)

(define (_$gib$ l) 
(cond ( (_$maulLeer$? l) l)
	  ( else (list (_$feldKoerner$ + 1  (_$getY$ (_$getHamster$ l)) (_$getX$ (_$getHamster$ l)) (_$getFeld$ l)) (_$hamsterKoerner$ - 1 (_$getHamster$ l)))) )
)

(define (_$nimm$ l) 
(cond ( (not (_$kornDa$? l)) l)
      ( else (list (_$feldKoerner$ - 1  (_$getY$ (_$getHamster$ l)) (_$getX$ (_$getHamster$ l)) (_$getFeld$ l)) (_$hamsterKoerner$ + 1 (_$getHamster$ l)))) )
)

(define (_$kornDa$? l) 
(if (> (_$getKachelKoerner$ (_$getKachel$ (_$getY$ (_$getHamster$ l)) (_$getX$ (_$getHamster$ l)) (_$getFeld$ l))) 0) #t #f)
)

(define (_$maulLeer$? l) 
(if (<= (_$getHamsterKoerner$ (_$getHamster$ l)) 0) #t #f)
)

(define (_$vornFrei$? l) 
(cond ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Nord") 
					(not (_$isMauer$? (_$getKachel$ (- (_$getY$ (_$getHamster$ l)) 1) (_$getX$ (_$getHamster$ l)) (_$getFeld$ l)))) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Ost") 
					(not (_$isMauer$? (_$getKachel$ (_$getY$ (_$getHamster$ l)) (+ (_$getX$ (_$getHamster$ l)) 1) (_$getFeld$ l)))) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "Sued") 
					(not (_$isMauer$? (_$getKachel$ (+ (_$getY$ (_$getHamster$ l)) 1) (_$getX$ (_$getHamster$ l)) (_$getFeld$ l)))) )
	  ( (eq? (_$getRichtung$ (_$getHamster$ l)) "West") 
					(not (_$isMauer$? (_$getKachel$ (_$getY$ (_$getHamster$ l)) (- (_$getX$ (_$getHamster$ l)) 1) (_$getFeld$ l)))) ))
)

(define (_$getHamster$ l)
(car (cdr l))
)

(define (_$getFeld$ l)
(car l)
)

(define (_$getKachelKoerner$ kachel)
(car (cdr kachel))
)

(define (_$getY$ hamster)
(car (cdr hamster))
)

(define (_$getX$ hamster)
(car (cdr (cdr hamster)))
)

(define (_$getHamsterKoerner$ hamster)
(car (cdr (cdr (cdr hamster))))
)

(define (_$getRichtung$ hamster)
(car (cdr (cdr (cdr (cdr hamster)))))
)

(define (_$isMauer$? kachel)
(if (eq? (car kachel) "Kachel") #f #t)
)

(define (_$getKachel$ zeile spalte feld)
(cond ((< zeile 0) 
       (cond ((< spalte 0 ) feld)
 			  			  ((= spalte 0) (_$getKachel$ zeile (- spalte 1)  (car feld)))
 			  			  ( else (_$getKachel$ zeile (- spalte 1)  (cdr feld)) )))
	  ((= zeile 0) (_$getKachel$ (- zeile 1) spalte (car feld)))
 	  ( else (_$getKachel$ (- zeile 1) spalte (cdr feld)) ))
)

(define (_$hamsterKoerner$ action anzahl hamster)
(list "Hamster" (_$getY$ hamster) (_$getX$ hamster) (action (_$getHamsterKoerner$ hamster) anzahl) (_$getRichtung$ hamster))
)

(define (_$kachelKoerner$ action anzahl kachel)
(list "Kachel" (action (_$getKachelKoerner$ kachel) anzahl))
)

(define (_$feldKoerner$ action anzahl zeile spalte feld)
(cond ( (< zeile 0) (cond ( (< spalte 0 ) (_$kachelKoerner$ action anzahl feld) )
 						   ( (= spalte 0) (cons (_$feldKoerner$ action anzahl zeile (- spalte 1)  (car feld)) (cdr feld)))
 						   ( else (cons (car feld) (_$feldKoerner$ action anzahl zeile (- spalte 1)  (cdr feld))) )) )
	  ( (= zeile 0) (cons (_$feldKoerner$ action anzahl  (- zeile 1) spalte (car feld)) (cdr feld)) )
 	  ( else (cons (car feld) (_$feldKoerner$ action anzahl  (- zeile 1) spalte (cdr feld))) ))
)
